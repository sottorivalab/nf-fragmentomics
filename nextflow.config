/*
 *
 * -------------------------------------------------
 *  nf-fragmentomics Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 *
 */

// pipeline genome parameters and reference files
params {
	// outdir: output directory
	outdir = null
	// input: input samplesheet.csv
	input  = null
	// targets: target.csv file
	targets = null
	// publish mode for all process
	publish_dir_mode = 'copy'
	// overwrite in the publish directory
	publish_dir_overwrite = true
	// genome_2bit: 2bit file of the reference genome
	genome_2bit = null
	// blacklist_bed: ENCODE blacklist regions
	blacklist_bed = null
	// preprocess: if true, preprocess the input data to bw
	preprocess       = true
	// genome_size: size of the reference genome
	genome_size      = 2913022398
	// bin_size: bin size for the bw files
	bin_size         = 10
	// target_expand_sx: bp to expand on the left of the target
	target_expand_sx = 4000
	// target_expand_dx: bp to expand on the right of the target
	target_expand_dx = 4000	
	// filter_min: minimum fragment length
	filter_min       = 90
	// filter_max: maximum fragment length
	filter_max       = 150
}

// Manifest
manifest {
	name = 'nf-fragmentomics'
	description = 'Nextflow pipeline for fragmentomics analysis'
	homePage = 'https://github.com/sottorivalab/nf-fragmentomics'
	mainScript = 'main.nf'
	defaultBranch = 'main'
	version = '0.2.1'
	license = 'MIT'
	nextflowVersion='>=24.9.0'

	contributors = [
		[
			name: 'Davide Rambaldi',
			affiliation: 'Human Technopole',
			email: 'davide.rambaldi@gmail.com',
			github: 'tucano',
			contribution: ['author'], // List of contribution types ('author', 'maintainer' or 'contributor')
			orcid: '0000-0002-1927-3645'
		]
	]						
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Enable trace logging for all processes
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')}.html"
}


includeConfig 'conf/base.config'
includeConfig 'conf/modules.config'

// profiles for containers and modes: stub, devel, debug, large, small
// See README for examples.
profiles {
	// stub run with minimal resources
	stub {
		process {
			resourceLimits = [
				cpus: 1, 
				memory: 4.GB
			]
			executor = "local"
		}
	}
	
	// debug run with debug options
	debug {
		process {
			debug = true
		}
		dumpHashes             = true
        process.beforeScript   = 'echo $HOSTNAME'
        cleanup                = false
        nextflow.enable.configProcessNamesValidation = true
	}

	// devel local run with minimal resources
	devel {
		process {
			resourceLimits = [
				cpus: 1, 
				memory: 8.GB
			]
			executor = "local"
			debug = true
			beforeScript = 'echo $HOSTNAME'
		}
	}

	test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
	

	// conda profile
	conda {
		conda.enabled          = true
		conda.channels         = ['bioconda', 'conda-forge', 'defaults']
		docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false        
        apptainer.enabled      = false		
		
		// use a single env for the whole pipeline
		process.conda = "${projectDir}/environment.yml"
	}

	// docker profile
	docker {
		docker.enabled         = true
		conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
		docker.runOptions      = '-u $(id -u):$(id -g)'
	}

	// singularity profile
	singularity {
		singularity.enabled      = true
		singularity.autoMounts   = true
		conda.enabled            = false
        docker.enabled           = false
        podman.enabled           = false
        shifter.enabled          = false
        charliecloud.enabled     = false
        apptainer.enabled        = false
	}

	// HumanTechnopole HPC profile
	hpc {
		singularity.runOptions   = '-B $SINGULARITY_TMPDIR:/tmp'
		singularity.envWhitelist = ['SINGULARITY_TMPDIR']

		process {
			executor = 'slurm'
			queue = 'cpuq'	
		}
	}

	// laptop devel profile
	arm {
		// Avoid this error:
		// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
		// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
		// once this is established and works well, nextflow might implement this behavior as new default.
		docker.runOptions = '-u $(id -u):$(id -g) --platform=linux/amd64'
	}
}
