theme(text=element_text(size=14), axis.text.x = element_text(angle = 90))
ggplot(region.indels.mdf, aes(x=Region, y=value, fill=variable)) + geom_bar(stat='identity') +
scale_fill_manual(values=c('#cb6339','#a5160f')) +
labs(y='# neoepitopes', fill='Binding strength', title = "Neoepitopes (Indels)", x="") +
theme_bw() +
theme(text=element_text(size=14), axis.text.x = element_text(angle = 90))
strength.df <- data.frame(Binder=c('Total', 'SB', 'WB'),
Clonal = as.numeric(summaryTable[,paste0('Clonal',c('','_SB', '_WB'))]),
Shared = as.numeric(summaryTable[,paste0('Shared',c('','_SB', '_WB'))]),
Subclonal = as.numeric(summaryTable[,paste0('Subclonal',c('','_SB', '_WB'))]))
strength.mdf <- melt(strength.df, id='Binder')
strength.indels.df <- data.frame(Binder=c('Total', 'SB', 'WB'),
Clonal = as.numeric(summaryTableIndels[,paste0('Clonal',c('','_SB', '_WB'))]),
Shared = as.numeric(summaryTableIndels[,paste0('Shared',c('','_SB', '_WB'))]),
Subclonal = as.numeric(summaryTableIndels[,paste0('Subclonal',c('','_SB', '_WB'))]))
strength.indels.mdf <- melt(strength.indels.df, id='Binder')
ggplot(strength.mdf, aes(x=Binder, y=value, fill=variable)) + geom_bar(stat='identity', position='fill') +
scale_y_continuous(labels=percent_format()) + scale_x_discrete(limits=c('WB', 'SB', 'Total')) +
coord_flip() + scale_fill_manual(values=c('#ce5c55','#dba002','#4e9ed0')) +
labs(y='Proportion of neoepitopes', fill='Clonality', title = 'Clonality SNP between timepoints') + theme_bw() + theme(text=element_text(size=14))
ggplot(strength.indels.mdf, aes(x=Binder, y=value, fill=variable)) + geom_bar(stat='identity', position='fill') +
scale_y_continuous(labels=percent_format()) + scale_x_discrete(limits=c('WB', 'SB', 'Total')) +
coord_flip() + scale_fill_manual(values=c('#ce5c55','#dba002','#4e9ed0')) +
labs(y='Proportion of neoepitopes', fill='Clonality', title = 'clonality Indels between timepoints') +
theme_bw() + theme(text=element_text(size=14))
numRegionsVenn <- 3
region_eps = list()
for (i in 1:numRegionsVenn){
region_eps[[i]] <- row.names(epTable[epTable[,paste0('Region',i)]==1,])
}
names(region_eps) <- regions
ggvenn(region_eps, fill_color = colors, stroke_size = 0.5, set_name_size = 4)
region_indels_eps = list()
for (i in 1:numRegionsVenn){
region_indels_eps[[i]] <- row.names(epIndelsTable[epIndelsTable[,paste0('Region',i)]==1,])
}
names(region_indels_eps) <- regions
ggvenn(region_indels_eps, fill_color = colors, stroke_size = 0.5, set_name_size = 4)
recopoTable.filtered <- subset(recopoTable, NeoantigenRecognitionPotential>1e-4)
epTable.filtered <- subset(epTable, peptide %in% recopoTable.filtered$MutantPeptide)
epTable.filtered$RecognitionPotential <- recopoTable.filtered$NeoantigenRecognitionPotential[match(epTable.filtered$peptide,
recopoTable.filtered$MutantPeptide)]
recopo.df <- data.frame(Region1 = epTable.filtered$Region1*epTable.filtered$RecognitionPotential)
for (i in 2:numRegions){
recopo.df[,paste0('Region',i)] <- epTable.filtered[,paste0('Region',i)]*epTable.filtered$RecognitionPotential
}
colnames(recopo.df) <- regions
recopo.mdf <- melt(recopo.df)
recopo.mdf <- subset(recopo.mdf, value > 1e-4)
colnames(recopo.mdf) <- c("timepoint","potential")
ggplot(recopo.mdf, aes(x = potential, color=timepoint))  +
scale_x_continuous(trans='log10') +
geom_histogram(binwidth = 0.1) +
labs(title="Neoantigens recognition potential > 1e-4", x="recognition potential")
ggplot(recopo.mdf, aes(x=timepoint, y=potential, fill=timepoint, shape=timepoint),) +
geom_violin() +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
scale_y_continuous(trans='log10') +
labs(x='', y='Recognition potential')
highest_reco_potential <- max(recopo.df)
highest_reco_potential
rmarkdown::paged_table(epTable.filtered[which(epTable.filtered$RecognitionPotential == highest_reco_potential),])
rmarkdown::paged_table(epTable.filtered[which(epTable.filtered$Rank == min(epTable.filtered$Rank)),])
ggplot(epTable.filtered, aes(x = Rank, y = RecognitionPotential)) +
geom_point(size=2, shape=23)
epTable.post <- epTable.filtered %>% filter(Region1 == 0, Region2 == 1, Region3 == 1) %>% arrange(-RecognitionPotential)
rmarkdown::paged_table(epTable.post)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Volumes/sottoriva/davide.rambaldi/neo_pred_pipe_MAYA_286_4.1')
library(dplyr)
library(ggplot2)
library(reshape2)
library(scales)
library(ggvenn)
sampleName <- 'MAYA_286'
numRegions <- 3
regions <- c('BASELINE','ON_ICI','POST_TMZ')
epTable.colnames <- c('Patient', paste0('Region',1:numRegions), 'LineID', 'Chrom', 'Start',
'RefAll', 'AltAll', 'Gene', 'pos', 'hla', 'peptide', 'core', 'Of', 'Gp',
'Gl', 'Ip', 'Il', 'Icore', 'Identity', 'Score_EL','Rank_EL', 'Score_BA','Rank_BA','Affinity','Cand','BindLevel','Novelity')
summaryTable <- read.table('MAYA_286.neoantigens.summarytable.txt', sep='\t', header=T, stringsAsFactors = F)
epTable <- read.table('MAYA_286.neoantigens.txt', sep='\t', stringsAsFactors = F)
names(epTable) <- epTable.colnames
recopoTable <- read.table('PredictedRecognitionPotentials.txt', sep='\t', stringsAsFactors = F, header=T)
summaryTableIndels <- read.table('MAYA_286.neoantigens.Indels.summarytable.txt', sep='\t', header=T, stringsAsFactors = F)
epIndelsTable <- read.table('MAYA_286.neoantigens.Indels.txt', sep='\t', stringsAsFactors = F)
names(epIndelsTable) <- epTable.colnames
colors = c('#ffd92f','#1b9e77', '#e31a1c','#1f78b4','#b07935','#a91e7d', '#525252', '#008080', '#ff6214')
#Summary by region and binding strength
region.df <- data.frame(Region = regions,
WB = as.numeric(summaryTable[,paste0('Total_WB_Region_',0:(numRegions-1))]),
SB = as.numeric(summaryTable[,paste0('Total_SB_Region_',0:(numRegions-1))]))
region.mdf <- melt(region.df,id='Region')
region.indels.df <- data.frame(Region = regions,
WB = as.numeric(summaryTableIndels[,paste0('Total_WB_Region_',0:(numRegions-1))]),
SB = as.numeric(summaryTableIndels[,paste0('Total_SB_Region_',0:(numRegions-1))]))
region.indels.mdf <- melt(region.indels.df,id='Region')
ggplot(region.mdf, aes(x=Region, y=value, fill=variable)) + geom_bar(stat='identity') +
scale_fill_manual(values=c('#cb6339','#a5160f')) +
labs(y='# neoepitopes', fill='Binding strength', title = "Neoepitopes (SNP)", x="") +
theme_bw() +
theme(text=element_text(size=14), axis.text.x = element_text(angle = 90))
ggplot(region.indels.mdf, aes(x=Region, y=value, fill=variable)) + geom_bar(stat='identity') +
scale_fill_manual(values=c('#cb6339','#a5160f')) +
labs(y='# neoepitopes', fill='Binding strength', title = "Neoepitopes (Indels)", x="") +
theme_bw() +
theme(text=element_text(size=14), axis.text.x = element_text(angle = 90))
strength.df <- data.frame(Binder=c('Total', 'SB', 'WB'),
Clonal = as.numeric(summaryTable[,paste0('Clonal',c('','_SB', '_WB'))]),
Shared = as.numeric(summaryTable[,paste0('Shared',c('','_SB', '_WB'))]),
Subclonal = as.numeric(summaryTable[,paste0('Subclonal',c('','_SB', '_WB'))]))
strength.mdf <- melt(strength.df, id='Binder')
strength.indels.df <- data.frame(Binder=c('Total', 'SB', 'WB'),
Clonal = as.numeric(summaryTableIndels[,paste0('Clonal',c('','_SB', '_WB'))]),
Shared = as.numeric(summaryTableIndels[,paste0('Shared',c('','_SB', '_WB'))]),
Subclonal = as.numeric(summaryTableIndels[,paste0('Subclonal',c('','_SB', '_WB'))]))
strength.indels.mdf <- melt(strength.indels.df, id='Binder')
ggplot(strength.mdf, aes(x=Binder, y=value, fill=variable)) + geom_bar(stat='identity', position='fill') +
scale_y_continuous(labels=percent_format()) + scale_x_discrete(limits=c('WB', 'SB', 'Total')) +
coord_flip() + scale_fill_manual(values=c('#ce5c55','#dba002','#4e9ed0')) +
labs(y='Proportion of neoepitopes', fill='Clonality', title = 'Clonality SNP between timepoints') + theme_bw() + theme(text=element_text(size=14))
ggplot(strength.indels.mdf, aes(x=Binder, y=value, fill=variable)) + geom_bar(stat='identity', position='fill') +
scale_y_continuous(labels=percent_format()) + scale_x_discrete(limits=c('WB', 'SB', 'Total')) +
coord_flip() + scale_fill_manual(values=c('#ce5c55','#dba002','#4e9ed0')) +
labs(y='Proportion of neoepitopes', fill='Clonality', title = 'clonality Indels between timepoints') +
theme_bw() + theme(text=element_text(size=14))
numRegionsVenn <- 3
region_eps = list()
for (i in 1:numRegionsVenn){
region_eps[[i]] <- row.names(epTable[epTable[,paste0('Region',i)]==1,])
}
names(region_eps) <- regions
ggvenn(region_eps, fill_color = colors, stroke_size = 0.5, set_name_size = 4)
region_indels_eps = list()
for (i in 1:numRegionsVenn){
region_indels_eps[[i]] <- row.names(epIndelsTable[epIndelsTable[,paste0('Region',i)]==1,])
}
names(region_indels_eps) <- regions
ggvenn(region_indels_eps, fill_color = colors, stroke_size = 0.5, set_name_size = 4)
recopoTable.filtered <- subset(recopoTable, NeoantigenRecognitionPotential>1e-4)
epTable.filtered <- subset(epTable, peptide %in% recopoTable.filtered$MutantPeptide)
epTable.filtered$RecognitionPotential <- recopoTable.filtered$NeoantigenRecognitionPotential[match(epTable.filtered$peptide,
recopoTable.filtered$MutantPeptide)]
recopo.df <- data.frame(Region1 = epTable.filtered$Region1*epTable.filtered$RecognitionPotential)
for (i in 2:numRegions){
recopo.df[,paste0('Region',i)] <- epTable.filtered[,paste0('Region',i)]*epTable.filtered$RecognitionPotential
}
colnames(recopo.df) <- regions
recopo.mdf <- melt(recopo.df)
recopo.mdf <- subset(recopo.mdf, value > 1e-4)
colnames(recopo.mdf) <- c("timepoint","potential")
ggplot(recopo.mdf, aes(x = potential, color=timepoint))  +
scale_x_continuous(trans='log10') +
geom_histogram(binwidth = 0.1) +
labs(title="Neoantigens recognition potential > 1e-4", x="recognition potential")
ggplot(recopo.mdf, aes(x=timepoint, y=potential, fill=timepoint, shape=timepoint),) +
geom_violin() +
stat_summary(fun.y=median, geom="point", size=2, color="red") +
scale_y_continuous(trans='log10') +
labs(x='', y='Recognition potential')
highest_reco_potential <- max(recopo.df)
highest_reco_potential
rmarkdown::paged_table(epTable.filtered[which(epTable.filtered$RecognitionPotential == highest_reco_potential),])
ggplot(epTable.filtered, aes(x = Rank_BA, y = RecognitionPotential)) +
geom_point(size=2, shape=23)
epTable.post <- epTable.filtered %>% filter(Region1 == 0, Region2 == 1, Region3 == 1) %>% arrange(-RecognitionPotential, Rank_BA)
rmarkdown::paged_table(epTable.post)
mafs <- list.files(path="maf", pattern = "*.\\.maf$", full.names = TRUE)
mafs
dir()
setwd('/Volumes/sottoriva/davide.rambaldi/neo_pred_pipe_MAYA_286_4.1')
mafs <- list.files(path="maf", pattern = "*.\\.maf$", full.names = TRUE)
mafs
dir()
setwd('/Volumes/sottoriva/davide.rambaldi/neo_pred_pipe_MAYA_286_4.1')
dir()
setwd('/Volumes/sottoriva/davide.rambaldi/neo_pred_pipe_MAYA_286_4.1')
dir()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = '/Volumes/sottoriva/davide.rambaldi/neo_pred_pipe_MAYA_286_4.1')
mafs <- list.files(path="maf", pattern = "*.\\.maf$", full.names = TRUE)
mafs
dir()
mafs <- list.files(path=".", pattern = "*.\\.maf$", full.names = TRUE)
mafs
all_samples_maf <- merge_mafs(mafs = mafs, removeDuplicatedVariants = FALSE)
library(maftools)
all_samples_maf <- merge_mafs(mafs = mafs, removeDuplicatedVariants = FALSE)
all_samples_maf_df <- subsetMaf(all_samples_maf, mafObj = FALSE, query = "FILTER %in% c('PASS','common_variant')")
all_samples_maf_df
all_samples_maf_df <- all_samples_maf_df %>%
mutate(VAF = as.numeric(t_alt_count)/as.numeric(t_depth)) %>%
filter(!is.na(VAF), VAF > 0)
all_sample_list_maf <- list()
maf_samples <- as.vector(unlist(sample_names))
#One can use any colors, here in this example color palette from RColorBrewer package is used
vc_cols = RColorBrewer::brewer.pal(n = 8, name = 'Paired')
names(vc_cols) = c(
'Frame_Shift_Del',
'Missense_Mutation',
'Nonsense_Mutation',
'Multi_Hit',
'Frame_Shift_Ins',
'In_Frame_Ins',
'Splice_Site',
'In_Frame_Del'
)
print(vc_cols)
oncoplot(maf = all_samples_maf_df, colors = vc_cols, showTumorSampleBarcodes=TRUE, SampleNamefontSize=.5, leftBarData = t1_gene_vaf)
maya_286_maf <- read.maf(all_samples_maf_df)
oncoplot(maf = maya_286_maf, colors = vc_cols, showTumorSampleBarcodes=TRUE, SampleNamefontSize=.5, leftBarData = t1_gene_vaf)
oncoplot(maf = maya_286_maf, colors = vc_cols, showTumorSampleBarcodes=TRUE, SampleNamefontSize=.5)
tmb(maf = maya_286_maf)
mafs <- list.files(path=".", pattern = "*.\\.maf$", full.names = TRUE)
all_samples_maf <- merge_mafs(mafs = mafs, removeDuplicatedVariants = FALSE)
all_samples_maf_df <- subsetMaf(all_samples_maf, mafObj = FALSE, query = "FILTER %in% c('PASS','common_variant')")
all_samples_maf_df <- all_samples_maf_df %>%
mutate(VAF = as.numeric(t_alt_count)/as.numeric(t_depth)) %>%
filter(!is.na(VAF), VAF > 0)
maya_286_maf <- read.maf(all_samples_maf_df)
tmb(maf = maya_286_maf)
maya_286_tmb <- tmb(maf = maya_286_maf)
maya_286_tmb
tmb(maf = maya_286_maf)
maya_286_tmb <- tmb(maf = maya_286_maf)
maya_286_tmb
region.mdf
region.df
maya_286_tmb
maya_286_tmb$total
x <- maya_286_tmb$total
y <- region.df$SB
x
y
plot(x,y)
region.df$WB
region.df
cbind(region.df, maya_286_tmb$total)
class(cbind(region.df, maya_286_tmb$total))
cbind(region.df, maya_286_tmb$total) %>% rename(tmb='maya_286_tmb$total')
maf_and_tmb <- cbind(region.df, maya_286_tmb$total) %>% rename(tmb='maya_286_tmb$total')
ggplot(maf_and_tmb, aes(x=SB, y=tmb)) +
geom_point(size=2, shape=23)
ggplot(maf_and_tmb, aes(x=SB, y=tmb)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE)
ggplot(maf_and_tmb, aes(x=SB, y=tmb)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE)
maf_and_tmb <- cbind(region.df, maya_286_tmb$total) %>% rename(tmb='maya_286_tmb$total')
ggplot(maf_and_tmb, aes(x=WB, y=tmb)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE)
names(epTable)
names(epTable)[24:25]
a <- list()
a
a["A"] <- list()
s
a
a["A"] <- 1
a
a["A"]["B"] <- 1
a
a["C"]["B"] <- 1
a["C"] <- list()
a
a["C"] = list(a = 1)
a
a["C"][1]
a["C"][1][1]
a["C"]
a
a$A
a$A$C
a$A <- 1
a$B <- 1
a$C <- 1
a
a$C$F
a$C <- []
a$C$F
a$C
install.packages("tidyverse")
library(tidyverse)
library(stringr)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = "/group/sottoriva/davide.rambaldi/fragmentomics/VALE_38_fragmentomics")
library(readr)
library(ggplot2)
library(stringr)
library(ggvenn)
install.packages("ggvenn")
library(ggvenn)
q("no")
library(colorspace)
pal <- choose_palette()
library(colorBrewer)
library(RColorBrewer)
display.brewer.all()
display.brewer.all(colorblindFriendly = TRUE)
# See vignette("pivot") for examples and explanation
fish_encounters
library(tidyr)
# See vignette("pivot") for examples and explanation
fish_encounters
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen)
# Fill in missing values
fish_encounters %>%
pivot_wider(names_from = station, values_from = seen, values_fill = 0)
# Generate column names from multiple variables
us_rent_income
us_rent_income %>%
pivot_wider(
names_from = variable,
values_from = c(estimate, moe)
)
# You can control whether `names_from` values vary fastest or slowest
# relative to the `values_from` column names using `names_vary`.
us_rent_income %>%
pivot_wider(
names_from = variable,
values_from = c(estimate, moe),
names_vary = "slowest"
)
# When there are multiple `names_from` or `values_from`, you can use
# use `names_sep` or `names_glue` to control the output variable names
us_rent_income %>%
pivot_wider(
names_from = variable,
names_sep = ".",
values_from = c(estimate, moe)
)
us_rent_income %>%
pivot_wider(
names_from = variable,
names_glue = "{variable}_{.value}",
values_from = c(estimate, moe)
)
# Can perform aggregation with `values_fn`
warpbreaks <- as_tibble(warpbreaks[c("wool", "tension", "breaks")])
warpbreaks
warpbreaks %>%
pivot_wider(
names_from = wool,
values_from = breaks,
values_fn = mean
)
# Can pass an anonymous function to `values_fn` when you
# need to supply additional arguments
warpbreaks$breaks[1] <- NA
warpbreaks %>%
pivot_wider(
names_from = wool,
values_from = breaks,
values_fn = ~ mean(.x, na.rm = TRUE)
)
fish_encounters
fish_encounters |> pivot_wider(names_from = station, values_from = seen)
rnorm(1000)
x <- tibble(case=LETTERS[1:10], timepoint=sample())
replicate(1000, sample(c("BL","PD")))
as.factor(replicate(1000, sample(c("BL","PD"))))
x <- tibble(case=LETTERS[1:10], timepoint=as.factor(replicate(1000, sample(c("BL","PD"))))
)
x <- tibble(case=[1:1000], timepoint=as.factor(replicate(1000, sample(c("BL","PD")))))
x <- tibble(case=1:1000, timepoint=as.factor(replicate(1000, sample(c("BL","PD")))))
x
x <- tibble(case=1:2000, timepoint=as.factor(replicate(1000, sample(c("BL","PD")))))
x
table <- c("a", "b", "d", "f")
df <- tibble(
g = c(1, 1, 1, 2, 2, 2, 2),
x = c("e", "a", "b", "c", "f", "d", "a")
)
df
table
df %>%
reframe(x = intersect(x, table))
library(dplyr)
df %>%
reframe(x = intersect(x, table))
df
df %>%
reframe(x = intersect(x, table), .by = g)
df <- data.frame(month=rep(1:3,2),
student=rep(c("Amy", "Bob"), each=3),
A=c(9, 7, 6, 8, 6, 9),
B=c(6, 7, 8, 5, 6, 7))
df
stocks <- tibble(
time = as.Date("2009-01-01") + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
stocksm <- stocks %>% gather(stock, price, -time)
stocksm
stocksm
stocksm |> spread(time, price)
df <- data.frame(x=abs(rnorm(50)),id1=rep(1:5,10), id2=rep(1:2,25))
df <- tbl_df(df)
res <- df %>% group_by(id1) %>%
do(w = wilcox.test(x~id2, data=., paired=FALSE)) %>%
summarise(id1, Wilcox = w$p.value)
df <- data.frame(x=abs(rnorm(50)),id1=rep(1:5,10), id2=rep(1:2,25))
df <- tbl_df(df)
res <- df %>% group_by(id1) %>%
do(w = wilcox.test(x~id2, data=.)) %>%
summarise(id1, Wilcox = w$p.value)
res
test <- rnorm(100)
test
peakValleys <- runif(20);
landform <- approx(x=seq_along(peakValleys), y=peakValleys, n=200)$y;
landform <- landform + runif(200, max=0.1);
plot(landform);
points(smooth(landform), type="l", col="red");
# Load necessary libraries
library(ggplot2)
# Custom smoothing function
custom_smooth <- function(data, width) {
n <- length(data)
smoothed_data <- numeric(n)
# Calculate distances from the center
center_index <- ceiling(n / 2)
distances <- seq(0, 1, length.out = n)
# Create weights that decrease towards the center
weights <- exp(-distances / width)
# Apply smoothing based on weights
for (i in 1:n) {
if (i < center_index) {
smoothed_data[i] <- sum(data[1:i] * weights[1:i]) / sum(weights[1:i])
} else if (i > center_index) {
smoothed_data[i] <- sum(data[i:n] * weights[i:n]) / sum(weights[i:n])
} else {
smoothed_data[i] <- data[i]  # No smoothing at the center
}
}
return(smoothed_data)
}
# Example usage
set.seed(42)
x <- seq(1, 100, by = 1)
y <- sin(x / 10) + rnorm(100, sd = 0.1)  # Sample data with noise
# Apply custom smoothing
smoothed_y <- custom_smooth(y, width = 5)
# Plot original and smoothed data
ggplot(data.frame(x, y, smoothed_y), aes(x)) +
geom_line(aes(y = y), color = 'blue', alpha = 0.5) +
geom_line(aes(y = smoothed_y), color = 'red') +
labs(title = "Custom Smoothing Function", y = "Value", x = "Index") +
theme_minimal()
smoothed_y <- custom_smooth(y, width = 1)
ggplot(data.frame(x, y, smoothed_y), aes(x)) +
geom_line(aes(y = y), color = 'blue', alpha = 0.5) +
geom_line(aes(y = smoothed_y), color = 'red') +
labs(title = "Custom Smoothing Function", y = "Value", x = "Index") +
theme_minimal()
smoothed_y <- custom_smooth(y, width = 100)
ggplot(data.frame(x, y, smoothed_y), aes(x)) +
geom_line(aes(y = y), color = 'blue', alpha = 0.5) +
geom_line(aes(y = smoothed_y), color = 'red') +
labs(title = "Custom Smoothing Function", y = "Value", x = "Index") +
theme_minimal()
smoothed_y <- custom_smooth(y, width = 100)
ggplot(data.frame(x, y, smoothed_y), aes(x)) +
geom_line(aes(y = y), color = 'blue', alpha = 0.5) +
geom_line(aes(y = smoothed_y), color = 'red') +
labs(title = "Custom Smoothing Function", y = "Value", x = "Index") +
theme_minimal()
smoothed_y <- custom_smooth(y, width = 0.1)
ggplot(data.frame(x, y, smoothed_y), aes(x)) +
geom_line(aes(y = y), color = 'blue', alpha = 0.5) +
geom_line(aes(y = smoothed_y), color = 'red') +
labs(title = "Custom Smoothing Function", y = "Value", x = "Index") +
theme_minimal()
seq(0, 1, length.out = 100)
y
suppressPackageStartupMessages(library(optparse))
suppressPackageStartupMessages(library(stringr))
suppressPackageStartupMessages(library(tibble))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(ggplot2))
suppressPackageStartupMessages(library(readr))
setwd("~/Documents/Projects/nextflow_dev/nf-fragmentomics/devel")
alldata <- as_tibble(read.delim(mfile, header=F, skip=1))\
mfile <- "../tests/input/matrix/FOXA2_regions_matrix.gz"
alldata <- as_tibble(read.delim(mfile, header=F, skip=1))\
alldata <- as_tibble(read.delim(mfile, header=F, skip=1))
mdata <- alldata %>%
select(c(-V1,-V2,-V3,-V4,-V5,-V6)) %>%
mutate_all(function(x) ifelse(is.nan(x), NA, x)) %>%
summarise(across(everything(), \(x) mean(x, na.rm = TRUE))) %>%
unlist()
View(mdata)
colnames(mdata)
fim(mdata)
dim(mdata)
mdata
mdata[[1]]
typeof(mdata)
mdata <- fortify(as.data.frame(mdata)) %>%
rename(raw="mdata") %>%
mutate(bin=1:length(mdata))
View(mdata)
colnames(mdata)
rownames(mdata)
rownames(mdata) <- NULL
save.image("~/Documents/Projects/nextflow_dev/nf-fragmentomics/devel/TestPeakStats.RData")
