nextflow_process {

    name "Test Process PEAK_STATS"
    script "modules/local/peakStats/main.nf"
    process "PEAK_STATS"

    test("Should run PEAK_STATS with default parameters") {

        when {
            params {
                // define parameters here. Example:
                // outdir = "tests/results"
            }
            process {
                """
                input[0] = [
                    [caseid: 'case1', sampleid: 'sample1'],
                    [source: 'source1', name: 'target1'],
                    file("test_data/input_matrix.txt")
                ]
                """
            }
        }

        then {
            assert process.success
            assert process.trace.tasks().size() == 1

            with(process.out.peaks) {
                assert size() == 1
                def outputs = get(0)
                assert outputs.size() == 5
                assert outputs[0] == [caseid: 'case1', sampleid: 'sample1']
                assert outputs[1] == [source: 'source1', name: 'target1']
                assert path(outputs[2]).name == "sample1_target1_source1_peak_data.tsv"
                assert path(outputs[3]).name == "sample1_target1_source1_peak_stats.csv"
                assert path(outputs[4]).name == "sample1_target1_source1_PeakIntegration.pdf"
            }
            
            assert snapshot(process.out).match()
            
        }

    }


    test("Should create expected output files") {
        when {
            process {
                """
                input[0] = [
                    [caseid: 'case2', sampleid: 'sample2'],
                    [source: 'source2', name: 'target2'],
                    file("test_data/input_matrix.txt")
                ]
                """
            }
        }

        then {
            assert process.success
            
            with(process.out.peaks) {
                assert size() == 1
                def outputs = get(0)
                assert path(outputs[2]).exists()
                assert path(outputs[3]).exists()
                assert path(outputs[4]).exists()
            }
        }
    }

}
